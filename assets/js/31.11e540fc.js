(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{324:function(t,e,s){"use strict";s.r(e);var n=s(14),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"plugin-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin-settings"}},[t._v("#")]),t._v(" Plugin Settings")]),t._v(" "),e("p",[t._v("You may override the default plugin settings by creating a "),e("code",[t._v("/config/saml-sp.php")]),t._v(" file.")]),t._v(" "),e("p",[t._v("View the settings you can override in your project at "),e("code",[t._v("/vendor/flipboxfactory/saml-sp/src/models/Settings.php")]),t._v(".\nEach setting has a description of what it does and how to customize it.")]),t._v(" "),e("h3",{attrs:{id:"entityid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entityid"}},[t._v("#")]),t._v(" EntityID")]),t._v(" "),e("p",[t._v("The Entity ID is the unique ID for the provider (your Craft instance) and defaults to the default site's base url.\nThere are two Entity ID's to understand for Service Provider (again, your Craft instance) and these 2 Entity Ids\nmust match to make things work properly.")]),t._v(" "),e("ol",[e("li",[t._v("System wide Entity ID")]),t._v(" "),e("li",[t._v("Provider Entity ID")])]),t._v(" "),e("h4",{attrs:{id:"system-wide-entity-id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#system-wide-entity-id"}},[t._v("#")]),t._v(" System Wide Entity ID")]),t._v(" "),e("p",[t._v("The system wide Entity ID is the Entity ID of the current environment. You can have multiple environments which will\nchange depending on which environment you're on (like your base url changes based on the environment).")]),t._v(" "),e("p",[t._v("Currently, you can edit the EntityID system wide a couple ways.")]),t._v(" "),e("h5",[t._v("1. Add a config file in "),e("code",[t._v("config/saml-sp.php")]),t._v(".")]),t._v(" "),e("p",[t._v("This location lives right next to the "),e("code",[t._v("general.php")]),t._v(". Below is an example file contents.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'entityId'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'https://my-entity-id'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("You can also use environmental variables with Craft parser by passing it as a string.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'entityId'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'$ENTITY_ID'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h5",[t._v('2. Edit from the admin (Goto the plugin in craft, then click on the "Settings" menu item under the plugins sub nav).')]),t._v(" "),e("p",[t._v('Set the "Default Entity ID" there which will save it to the project config. Environmental variable that can be parsed by\nthe Craft parse can also be set here (ie, $ENTITY_ID).')]),t._v(" "),e("h4",{attrs:{id:"provider-entity-id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider-entity-id"}},[t._v("#")]),t._v(" Provider Entity ID")]),t._v(" "),e("p",[t._v("Like the system wide Entity ID, there can be multiple providers, possibly one per environment with\ndifferent configurations. These providers are saved in the database and must be static due to the configuration data\nshare with the IdP. Provider Entity IDs can be modified on the edit page of the provider in the plugin control panel.")]),t._v(" "),e("h3",{attrs:{id:"group-configuration-group-assignment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#group-configuration-group-assignment"}},[t._v("#")]),t._v(" Group Configuration/Group Assignment")]),t._v(" "),e("h4",{attrs:{id:"group-attribute-name-group-attribute-mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#group-attribute-name-group-attribute-mapping"}},[t._v("#")]),t._v(" Group Attribute Name/Group Attribute Mapping")]),t._v(" "),e("p",[t._v("Many IdPs will send groups as an attribute within the SAML Response. When configured, the plugin use that attribute to\nassign the user to the group properly. To achieve this,  add a "),e("code",[t._v("config/saml-sp.php")]),t._v(" then use the\nfollowing configuration.")]),t._v(" "),e("h5",[t._v("Example")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// change the value as needed")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'groupAttributeNames'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'groups'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Make sure the value matches the attribute name sent from the IdP.")]),t._v(" "),e("h4",{attrs:{id:"auto-create-groups-removed-version-2-3-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auto-create-groups-removed-version-2-3-0"}},[t._v("#")]),t._v(" Auto-Create Groups Removed (version 2.3.0)")]),t._v(" "),e("p",[t._v("Due to the release of Craft CMS 3.5, the project config has become more prevalant. Therefore, we've decided\nto remove the support for "),e("code",[t._v("autoCreateGroups")]),t._v(" in version 2.3.0. Production environments shouldn't be saving user\ngroups when following the project config workflow. This should be done at the lower level environments.")]),t._v(" "),e("p",[t._v("Please use an event as shown below.")]),t._v(" "),e("h4",{attrs:{id:"managing-permissions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#managing-permissions"}},[t._v("#")]),t._v(" Managing Permissions")]),t._v(" "),e("p",[t._v("Managing permissions ** is not supported ** automatically. There are a few options on how to manually manage\npermissions:")]),t._v(" "),e("ol",[e("li",[t._v("Create the groups before implementing the plugin. Make sure you know all of the groups needed to assign the users\nproperly.")]),t._v(" "),e("li",[t._v("Use an event! See the "),e("RouterLink",{attrs:{to:"/configure/events.html#assign-user-to-a-user-group-based-on-a-property"}},[t._v("EVENT_AFTER_RESPONSE_TO_USER")]),t._v(" example.")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);